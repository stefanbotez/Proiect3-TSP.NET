//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReferencePhotos
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Media", Namespace="http://schemas.datacontract.org/2004/07/P1.Data", IsReference=true)]
    public partial class Media : object
    {
        
        private System.DateTime Creation_DateField;
        
        private string DescriptionField;
        
        private int IdField;
        
        private bool IsDeletedField;
        
        private string PathField;
        
        private System.Collections.Generic.List<ServiceReferencePhotos.Tags> TagsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Creation_Date
        {
            get
            {
                return this.Creation_DateField;
            }
            set
            {
                this.Creation_DateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this.DescriptionField;
            }
            set
            {
                this.DescriptionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDeleted
        {
            get
            {
                return this.IsDeletedField;
            }
            set
            {
                this.IsDeletedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Path
        {
            get
            {
                return this.PathField;
            }
            set
            {
                this.PathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<ServiceReferencePhotos.Tags> Tags
        {
            get
            {
                return this.TagsField;
            }
            set
            {
                this.TagsField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Tags", Namespace="http://schemas.datacontract.org/2004/07/P1.Data", IsReference=true)]
    public partial class Tags : object
    {
        
        private int IdField;
        
        private ServiceReferencePhotos.Media MediaField;
        
        private int MediaIdField;
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReferencePhotos.Media Media
        {
            get
            {
                return this.MediaField;
            }
            set
            {
                this.MediaField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MediaId
        {
            get
            {
                return this.MediaIdField;
            }
            set
            {
                this.MediaIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReferencePhotos.IMediaTags")]
    public interface IMediaTags
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMedia/GetMedia", ReplyAction="http://tempuri.org/InterfaceMedia/GetMediaResponse")]
        System.Threading.Tasks.Task<ServiceReferencePhotos.Media> GetMediaAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMedia/GetAllMedia", ReplyAction="http://tempuri.org/InterfaceMedia/GetAllMediaResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferencePhotos.Media>> GetAllMediaAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMedia/QueryMedia", ReplyAction="http://tempuri.org/InterfaceMedia/QueryMediaResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferencePhotos.Media>> QueryMediaAsync(string toSearch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMedia/QueryMediaDate", ReplyAction="http://tempuri.org/InterfaceMedia/QueryMediaDateResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferencePhotos.Media>> QueryMediaDateAsync(string toSearch, System.DateTime from, System.DateTime to);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMedia/AddMedia", ReplyAction="http://tempuri.org/InterfaceMedia/AddMediaResponse")]
        System.Threading.Tasks.Task<ServiceReferencePhotos.Media> AddMediaAsync(ServiceReferencePhotos.Media entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMedia/DeleteMedia", ReplyAction="http://tempuri.org/InterfaceMedia/DeleteMediaResponse")]
        System.Threading.Tasks.Task DeleteMediaAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMedia/GetMediaByPath", ReplyAction="http://tempuri.org/InterfaceMedia/GetMediaByPathResponse")]
        System.Threading.Tasks.Task<ServiceReferencePhotos.Media> GetMediaByPathAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMedia/UpdateMedia", ReplyAction="http://tempuri.org/InterfaceMedia/UpdateMediaResponse")]
        System.Threading.Tasks.Task UpdateMediaAsync(ServiceReferencePhotos.Media entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMedia/AddTagToMedia", ReplyAction="http://tempuri.org/InterfaceMedia/AddTagToMediaResponse")]
        System.Threading.Tasks.Task<ServiceReferencePhotos.Media> AddTagToMediaAsync(ServiceReferencePhotos.Media media, ServiceReferencePhotos.Tags tag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMedia/RemoveTagFromMedia", ReplyAction="http://tempuri.org/InterfaceMedia/RemoveTagFromMediaResponse")]
        System.Threading.Tasks.Task<ServiceReferencePhotos.Media> RemoveTagFromMediaAsync(string path, int tagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceTags/GetTag", ReplyAction="http://tempuri.org/InterfaceTags/GetTagResponse")]
        System.Threading.Tasks.Task<ServiceReferencePhotos.Tags> GetTagAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceTags/QueryTags", ReplyAction="http://tempuri.org/InterfaceTags/QueryTagsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<int>> QueryTagsAsync(string toSearch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceTags/GetAllTags", ReplyAction="http://tempuri.org/InterfaceTags/GetAllTagsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferencePhotos.Tags>> GetAllTagsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceTags/AddTag", ReplyAction="http://tempuri.org/InterfaceTags/AddTagResponse")]
        System.Threading.Tasks.Task<ServiceReferencePhotos.Tags> AddTagAsync(ServiceReferencePhotos.Tags entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceTags/DeleteTag", ReplyAction="http://tempuri.org/InterfaceTags/DeleteTagResponse")]
        System.Threading.Tasks.Task DeleteTagAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceTags/GetTagByName", ReplyAction="http://tempuri.org/InterfaceTags/GetTagByNameResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferencePhotos.Tags>> GetTagByNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediaTags/Complete", ReplyAction="http://tempuri.org/IMediaTags/CompleteResponse")]
        System.Threading.Tasks.Task CompleteAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface IMediaTagsChannel : ServiceReferencePhotos.IMediaTags, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class MediaTagsClient : System.ServiceModel.ClientBase<ServiceReferencePhotos.IMediaTags>, ServiceReferencePhotos.IMediaTags
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public MediaTagsClient() : 
                base(MediaTagsClient.GetDefaultBinding(), MediaTagsClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IMediaTags.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MediaTagsClient(EndpointConfiguration endpointConfiguration) : 
                base(MediaTagsClient.GetBindingForEndpoint(endpointConfiguration), MediaTagsClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MediaTagsClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(MediaTagsClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MediaTagsClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(MediaTagsClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MediaTagsClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<ServiceReferencePhotos.Media> GetMediaAsync(int id)
        {
            return base.Channel.GetMediaAsync(id);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferencePhotos.Media>> GetAllMediaAsync()
        {
            return base.Channel.GetAllMediaAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferencePhotos.Media>> QueryMediaAsync(string toSearch)
        {
            return base.Channel.QueryMediaAsync(toSearch);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferencePhotos.Media>> QueryMediaDateAsync(string toSearch, System.DateTime from, System.DateTime to)
        {
            return base.Channel.QueryMediaDateAsync(toSearch, from, to);
        }
        
        public System.Threading.Tasks.Task<ServiceReferencePhotos.Media> AddMediaAsync(ServiceReferencePhotos.Media entity)
        {
            return base.Channel.AddMediaAsync(entity);
        }
        
        public System.Threading.Tasks.Task DeleteMediaAsync(int id)
        {
            return base.Channel.DeleteMediaAsync(id);
        }
        
        public System.Threading.Tasks.Task<ServiceReferencePhotos.Media> GetMediaByPathAsync(string path)
        {
            return base.Channel.GetMediaByPathAsync(path);
        }
        
        public System.Threading.Tasks.Task UpdateMediaAsync(ServiceReferencePhotos.Media entity)
        {
            return base.Channel.UpdateMediaAsync(entity);
        }
        
        public System.Threading.Tasks.Task<ServiceReferencePhotos.Media> AddTagToMediaAsync(ServiceReferencePhotos.Media media, ServiceReferencePhotos.Tags tag)
        {
            return base.Channel.AddTagToMediaAsync(media, tag);
        }
        
        public System.Threading.Tasks.Task<ServiceReferencePhotos.Media> RemoveTagFromMediaAsync(string path, int tagId)
        {
            return base.Channel.RemoveTagFromMediaAsync(path, tagId);
        }
        
        public System.Threading.Tasks.Task<ServiceReferencePhotos.Tags> GetTagAsync(int id)
        {
            return base.Channel.GetTagAsync(id);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<int>> QueryTagsAsync(string toSearch)
        {
            return base.Channel.QueryTagsAsync(toSearch);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferencePhotos.Tags>> GetAllTagsAsync()
        {
            return base.Channel.GetAllTagsAsync();
        }
        
        public System.Threading.Tasks.Task<ServiceReferencePhotos.Tags> AddTagAsync(ServiceReferencePhotos.Tags entity)
        {
            return base.Channel.AddTagAsync(entity);
        }
        
        public System.Threading.Tasks.Task DeleteTagAsync(int id)
        {
            return base.Channel.DeleteTagAsync(id);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferencePhotos.Tags>> GetTagByNameAsync(string name)
        {
            return base.Channel.GetTagByNameAsync(name);
        }
        
        public System.Threading.Tasks.Task CompleteAsync()
        {
            return base.Channel.CompleteAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IMediaTags))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IMediaTags))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8000/PC");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return MediaTagsClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IMediaTags);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return MediaTagsClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IMediaTags);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IMediaTags,
        }
    }
}
